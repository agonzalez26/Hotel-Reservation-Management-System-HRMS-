Word,Count
the,311
*,282
=,190
if,183
to,132
is,122
},118
stage,111
button,110
{,109
,102
FXML,93
//,92
selected,91
in,90
root,87
up,83
load,81
OTHER,80
document,80
import,76
new,75
a,70
and,68
database,66
of,61
guest,56
private,56
reservation,49
get,46
reference,44
integer,44
room,44
@FXML,44
button's,44
for,41
set,41
number,39
(Stage),38
else,36
not,35
id,35
employee,34
class,34
amenity,33
scene,33
an,32
that,31
with,30
handles,29
create,29
@pre:,28
The,28
all,28
@post:,26
empty,25
hotel,25
public,24
information,23
void,23
Alert,22
functionalities,21
string,21
Method,20
exit,19
@return,19
==,19
application,19
events,18
confirmation,18
from,18
||,18
String,18
rooms,18
\FXMLLoader.load(HRMS.class.getResource("\View/ContactInfoView.fxml"\));\,18
price,17
be,17
Button,17
(event.getSource(),17
action,17
@param,17
Function,17
or,16
@post,16
*/,16
name,16
add,16
@pre,16
textfield,16
when,16
@author,16
on,16
Optional<ButtonType>,16
will,16
a.showAndWait();,16
result,16
\Alert(Alert.AlertType.ERROR,\,16
ButtonType.OK);,16
agonzalez26,15
variables,15
return,14
this,14
exist,14
password,14
Controller,13
method,13
TextField,13
does,13
HomeView,13
reservations,13
Initializes,13
controller,13
are,13
alert,12
manager,12
try,12
checks,12
must,12
at,12
called,12
into,11
login,11
/*,11
returns,11
&&,11
only,11
before,11
we,10
IOException,10
throws,10
input,10
exists,10
update,10
TODO,10
Room,10
data,9
field,9
null;,9
back,9
address,9
has,9
true,9
change,9
Guest,9
value,9
next,9
cancel,9
\FXMLLoader.load(HRMS.class.getResource("\View/DayView.fxml"\));\,9
error,9
first,9
@Override,8
stage.show();,8
stage.setScene(scene);,8
object,8
check,8
handle,8
Scene(root);,8
constructor,8
Scene,8
staying,8
false,8
have,8
catch,8
EmptyError();,8
+,8
delete,8
EmployeeReservationView,8
\FXMLLoader.load(HRMS.class.getResource("\View/ManagerViewAmenity.fxml"\));\,7
description,7
Amenity,7
parse,7
count,7
*returns,7
Operator,7
current,7
their,7
Updates,7
roomButton.getScene().getWindow();,7
currently,7
updated,7
catches,6
there,6
\display,\,6
click,6
main,6
creates,6
checked,6
window,6
one,6
\textfield,\,6
setting,6
\accessible,\,6
logout,6
int,6
inputs,6
startup,6
//validation,6
calls,6
returning,6
/**,6
email,6
\FXMLLoader.load(HRMS.class.getResource("\View/EmployeeReservation.fxml"\));\,6
ok,6
amenities,6
phone,6
display,6
last,6
choose,6
(String),6
To,6
template,6
null,5
by,5
filled,5
\empty"\,\,5
it,5
do,5
missing,5
roomAmenitiesList,5
correct,5
}else,5
can,5
(int),5
nextButton.getScene().getWindow();,5
values,5
EmployeeLoginView,5
\FXMLLoader.load(HRMS.class.getResource("\View/HomeView.fxml"\));\,5
added,5
use,5
date,5
guests,5
e),5
any,5
needs,5
methods,5
ResourceBundle,4
day,4
};,4
RoomView,4
javafx.scene.Parent;,4
initialize(URL,4
javafx.fxml.FXMLLoader;,4
bill,4
how,4
Parent,4
javafx.scene.Scene;,4
Initializable,4
IDs,4
\System.out.println("\\nError\,4
rb),4
available,4
format,4
javafx.fxml.Initializable;,4
package,4
hrms.HRMS;,4
output,4
javafx.fxml.FXML;,4
\textfields,\,4
gui,4
\System.out.println("\Amenity\,4
retrieve,4
\Callback<DatePicker,\,4
}catch(Exception,4
setup,4
javafx.scene.control.Button;,4
javafx.event.ActionEvent;,4
System.exit(0);,4
handleButtonAction(ActionEvent,4
hrms.Controller;,4
whether,4
after,4
\"\Address\,4
dates,4
>,4
\gui,\,4
e.getMessage());,4
hotel*/,4
}else{,4
depends,4
choice,4
list,4
Number,4
java.io.IOException;,4
Stage,4
event),4
java.util.ResourceBundle;,4
Reservation,4
ConfirmationError,4
javafx.scene.layout.AnchorPane;,4
\url,\,4
implements,4
DatePicker,4
employeeId,4
Name,4
\FXMLLoader.load(HRMS.class.getResource("\View/ManagerViewEmployee.fxml"\));\,4
javafx.stage.Stage;,4
\reservation,\,4
});,4
java.net.URL;,4
box,4
see,4
roomCount,3
tests,3
message,3
|,3
system,3
ContactInfoViewController,3
matched,3
true;,3
dayCount,3
description.isEmpty()){,3
\valid"\,\,3
A,3
Templates,3
used,3
edit,3
\file,\,3
extra,3
EmployeeReservationController,3
attached,3
DayViewController,3
AnchorPane,3
out,3
!description.isEmpty()){,3
\FXMLLoader.load(HRMS.class.getResource("\View/ManagerViewPrice.fxml"\));\,3
1,3
Confirmation,3
search,3
open,3
long,3
\System.out.println("\Showing\,3
through,3
if(name.isEmpty(),3
standing,3
->{,3
EmployeeViewController,3
Variables,3
+=,3
searchButton.getScene().getWindow();,3
Tools,3
javafx.scene.control.TextField;,3
/*list,3
Headers,3
its,3
income,3
session,3
roomString,3
editor,3
then,3
assigned,3
checkout,3
cancelButton.getScene().getWindow();,3
price.isEmpty(),3
EmployeeView,3
which,3
roomList,3
\header,\,3
updates,3
Properties,3
deleteButton.getScene().getWindow();,3
but,3
Project,3
contains,3
boolean,3
!price.isEmpty(),3
License,3
call,3
if(!name.isEmpty(),3
license,3
filling,3
db,2
ArrayList<Room>,2
addButton.getScene().getWindow();,2
nextButton;,2
separate,2
DateCell>(),2
needed,2
logOutButton),2
cancelButton;,2
Thou,2
amount,2
Deletes,2
textfields,2
DayView,2
empty);,2
\password,\,2
\format"\,\,2
>=0,2
logInButton;,2
chosen,2
changed,2
calendar,2
\"\First\,2
because,2
you,2
cancelButton),2
managerButton),2
was,2
setDisable(true);,2
call(final,2
checkin,2
so,2
make,2
false;,2
probably,2
id;,2
mod,2
being,2
DateCell>,2
zero,2
0,2
if(!isNumeric(conNum)){,2
attempt,2
match,2
DateCell(),2
\setStyle("\-fx-background-color:\,2
\"\Credit\,2
end,2
initialization,2
EmptyError,2
(yyyy-mm-dd/yyyy-mm-dd),2
ComboPooledDataSource();,2
multiple,2
System.out.println(endDate.getValue());,2
for(int,2
javafx.scene.control.ButtonType;,2
days,2
using,2
javafx.scene.control.Alert;,2
roomAmenitiesList.size(),2
cpds;,2
\billAmountText.setText("\$"\+app.getBill());\,2
about,2
endDate.setValue(startDate.getValue().plusDays(1));,2
general,2
removeButton.getScene().getWindow();,2
logInButton),2
\FXMLLoader.load(HRMS.class.getResource("\View/EmployeeLoginView.fxml"\));\,2
backButton.getScene().getWindow();,2
\guest,\,2
\"\Phone\,2
adds,2
successful,2
doesn't,2
datePicker),2
reserved,2
Database();,2
\if(conNum.equals("\"\)){\,2
want,2
\#ffc0cb;"\);\,2
removed,2
updateItem(LocalDate,2
\Empty"\,\,2
employee's,2
backButton),2
changes,2
log,2
\object,\,2
and/or,2
ds.getConnection();,2
user,2
indexes,2
Initialize,2
they,2
existing,2
newEmployeePassword.isEmpty()),2
managerButton.getScene().getWindow();,2
need,2
Each,2
logInButton.getScene().getWindow();,2
connect,2
updateButton.getScene().getWindow();,2
\cpds.setJdbcUrl("\jdbc:sqlite:Database.sqlite"\);\,2
generate,2
ContactInfoView,2
set(String),2
plus,2
stay,2
\"\Email\,2
//loads,2
\FXMLLoader.load(HRMS.class.getResource("\View/ManagerView.fxml"\));\,2
All,2
Setting,2
\item,\,2
\0,\,2
nextButton),2
>0,2
calendars,2
Card,2
DB,2
objects,2
ConfirmationError();,2
backButton;,2
(double),2
dragons,2
\cpds.setDriverClass("\org.sqlite.JDBC"\);\,2
necessary,2
createButton.getScene().getWindow();,2
cpds,2
cpds.setMaxStatements(180);,2
jdbc,2
\super.updateItem(item,\,2
\EmployeeMC.addEmployee(newFirstName,\,2
as,2
command,2
style,2
\,\,2
Returns,2
Count,2
\"\\,2
password.isEmpty()),2
disable,2
dayCell,2
forewarned,2
employees,2
managerButton;,2
deletes,2
specific,2
based,2
static,2
Employee,2
\newLastName,\,2
manage,2
\Reservation"\);\,2
own,2
related,2
\System.out.println("\Employee\,2
\Text"\,\,2
GuestView,2
everything,2
driver,2
provided,2
Not,2
created,2
default,2
\"\Last\,2
ID,2
logOutButton;,2
\rooms"\);\,2
Database,2
proper,2
mod.getGuest(app.getReservationNumber());,2
c,2
Bill,2
Creates,2
cell,2
final,2
empty),2
art,2
guestCount,2
more,2
java.util.Optional;,2
DateCell,2
these,2
billAmountText;,2
if(guest!=null){,2
hrms.Model.Guest;,1
cleared,1
wants,1
javafx.scene.control.DatePicker;,1
Remove,1
validateCreditCard(),1
terminated,1
\if(s.equals("\model"\))\,1
List<Reservation>,1
\removed."\);\,1
res.getReservedDates();,1
set(int),1
\"\;\,1
roomsList;,1
rooms.size();count++){,1
ds;,1
date2,1
roomTable.setItems(sortedData);,1
guestEmailAddress.getText().isEmpty(),1
*It,1
lastName);,1
nfe),1
place,1
deleted,1
validateAddress();,1
unsuccessful,1
Ejiroghene,1
firstName.getText();,1
System.out.println(r.getRoomDescription());,1
aod;,1
updateGuest(),1
Application,1
*reservation,1
complex,1
2,1
\phoneNumber,\,1
this.stmt,1
\rs.getString("\email"\),\,1
go,1
(NumberFormatException,1
Manager,1
format:,1
guestAddress1.getText().isEmpty(),1
getBill,1
amenitiesList;,1
((newFirstName.isEmpty(),1
conNum,1
deleteGuest,1
already,1
RoomViewController,1
\newEmployeePassword,\,1
allow,1
ModelControl(db.getConnection());,1
guestAddress2.getText();,1
validateLastName(),1
thing...,1
guestAddress2;,1
clear,1
deleteButton;,1
reservedDate,1
retrieves,1
validatePhoneNumber();,1
Always,1
\reservations"\);\,1
(!phoneNumber.isEmpty()),1
endDate.getValue().toEpochDay();,1
ind+3);,1
\initialization,\,1
Labels,1
*check,1
EmployeeloginView,1
validateFirstName(),1
info(objects),1
javafx.util.Callback;,1
desired,1
managerButton.setDisable(true);,1
\Updated."\);\,1
guestHolder;,1
rs,1
constructors,1
\c.prepareStatement("\INSERT\,1
regarding,1
(guestFirstName.getText().isEmpty(),1
\models,\,1
Changes,1
flag,1
\for,\,1
steps,1
chosenRooms.size()-1;,1
age);,1
fill,1
(!firstName.isEmpty()),1
\(!firstName.matches("\[a-zA-Z]+"\))\,1
roomid,1
updateButton),1
RoomSelectionView,1
EmptyError(),1
\System.out.println(PriceMC.setRoomPrice(typeofRoom,\,1
what,1
10);,1
total,1
amenity's,1
spaces,1
wont,1
i<chosenRooms.size();,1
\"\Missing\,1
ds,1
way,1
\9:\n"\\,1
fields,1
((!address1.isEmpty()),1
additional,1
confirmed,1
(!emailAddress.isEmpty()),1
\1:\n"\\,1
\rs.getString("\phoneNumber"\),\,1
phoneNumber,1
columns,1
Guest())),1
*dont,1
(item.isBefore(LocalDate.now()),1
set(double),1
Events,1
\added"\);\,1
never,1
guest's,1
unsuccessful(Reservation,1
far,1
setTooltip(new,1
roomId,1
app,1
credentials,1
roomButton;,1
item.isAfter(LocalDate.now())),1
\used,\,1
3,1
every,1
hrms.Model.Database;,1
*This,1
just,1
lastName,1
access,1
true);,1
\System.out.println("\Deleted\,1
bookin,1
entity,1
System.out.println(app.getEndDate());,1
book,1
System.out.println(app.getStartDate());,1
List,1
pull,1
confirmationNumber,1
res,1
lastName.getText();,1
ind,1
given,1
\confirmationNumberText.textProperty().addListener((observableValue,oldValue,newValue)\,1
Hotel,1
email);,1
\occupied,\,1
here;,1
java.time.temporal.ChronoUnit;,1
\oldValue,\,1
different,1
Get,1
dayCount;,1
Management,1
addRoom(String,1
paid,1
calendarsInitialize();,1
ArrayList(ViewMC.getHotelRooms());,1
\string,\,1
passcode,1
HRMS,1
args,1
CheckOutView,1
creats,1
ComboPooledDataSource,1
(isNumeric(newFirstName),1
//not,1
completed,1
size,1
List<Guest>,1
initializing,1
same,1
app.setStartDate(date[0]);,1
guestEmailAddress.getText();,1
ConfirmationView,1
startDate.setValue(LocalDate.now());,1
street,1
//probably,1
isNumeric(String,1
side,1
app.setE,1
work,1
0;count,1
guestAddress1.getText();,1
ManagerViewAmenityController,1
\well,\,1
validateLastName();,1
\address,\,1
CheckOutController,1
ManagerViewEmployee,1
Guests,1
*has,1
totalAmount;,1
creditCard,1
endDate;,1
firstName);,1
privileges,1
emailAddress,1
each,1
holds,1
extension,1
\anything,\,1
logged,1
confirmationNumber;,1
firstName,1
individually,1
newValue),1
further,1
\(!address1.matches("\\\d{1,5}\\s\\w+\\s\\w+"\))\,1
those,1
if(Double.toString(room.getRoomPrice()).contains(newValue)){,1
!password.isEmpty()),1
delete),1
We,1
\them,\,1
\"\,\,1
SortedList<Room>,1
//get,1
filteredData.setPredicate((Predicate<,1
operator,1
ids,1
\dates.split("\/"\);\,1
PriceMC.getHotelRooms();,1
\prep.setString(2,\,1
(!creditCard.isEmpty()),1
\reservations,\,1
deleteButton),1
line,1
\methods,\,1
\firstName,\,1
start,1
confirmationNumberText.setOnKeyReleased(e,1
for(Room,1
this.id,1
info,1
removes,1
/*person,1
address1,1
\lastName,\,1
\rs.getString("\address"\),\,1
questionable,1
searchButton),1
calendarsInitialize(),1
id){,1
if(s==chosenRooms.get(end)){,1
me,1
searchButton;,1
\class,\,1
attempting,1
validateFirstName();,1
newValue.isEmpty()){,1
determines,1
\"\';"\);\,1
\System.out.println("\Database\,1
assignedDate,1
\prep.setString(5,\,1
instead,1
\Guest(rs.getString("\firstName"\),\,1
*information,1
\if(id.equals("\0000"\)){\,1
\rooms,\,1
hrms.Model.Reservation;,1
thinking,1
Just,1
s,1
validateEmailAddress(),1
/*Guest,1
updateButton;,1
(!address2.isEmpty()),1
textField,1
\(!phoneNumber.matches("\^\\d+"\))\,1
validateEmailAddress();,1
\error"\);\,1
(item.isBefore(startDate.getValue().plusDays(1))),1
dayCellFactory2,1
anyone,1
javafx.scene.control.DateCell;,1
than,1
reservationButton.getScene().getWindow();,1
List<Amenity>,1
time,1
app.setStartDate(startDate.getValue().toString());,1
->,1
Bad,1
newFirstName.isEmpty(),1
startDate;,1
intended,1
if(s!=chosenRooms.get(0)){,1
Table,1
endDate.setValue(LOCAL_DATE(assignedDate));,1
\System.out.println("\Room\,1
validateCreditCard();,1
roomInfoViewTest){,1
reservationList.size();,1
unless,1
reservationsList;,1
\6:\n"\\,1
customer,1
confirmationNumberText;,1
No,1
should,1
age,1
such,1
algorithm,1
person,1
particular,1
if(newValue,1
roomlist,1
com.mchange.v2.c3p0.*;,1
guestFirstName;,1
sortedData,1
even,1
searchUser(){,1
passing,1
\Tooltip("\You're\,1
worry,1
if(guest==null){,1
concerned,1
\stmt.executeQuery("\SELECT\,1
\cleanup,\,1
confirmationNumberText.getText();,1
only0,1
guestCCNumber.getText();,1
Add,1
guestLastName.getText();,1
I,1
\created."\);\,1
VALUES,1
\system,\,1
books,1
roomInfoViewTest,1
com.mchange.v2.c3p0.ComboPooledDataSource;,1
\'"\\,1
services,1
app.setEndDate(date[1]);,1
date1,1
extends,1
System.out.println(rooms.get(count).getHotelRoomFlag());,1
Application();,1
endDate.setDayCellFactory(dayCellFactory2);,1
pre:,1
*manager,1
ModelControl,1
(inefficient),1
options,1
\prep.setString(4,\,1
products,1
(after,1
(!lastName.isEmpty()),1
getGuest(int,1
logOutButton.getScene().getWindow();,1
\1a:\n"\\,1
occupied,1
\FXMLLoader.load(HRMS.class.getResource("\View/EmployeeView.fxml"\));\,1
(NullPointerException,1
yyyy-mm-dd,1
*should,1
super,1
javafx.scene.control.Tooltip;,1
PreparedStatement,1
guestCCNumber.getText().isEmpty()),1
\programming,\,1
concerning,1
guestEmailAddress;,1
startDate.setEditable(false);,1
initialize,1
\(!address2.matches("\\\w+\\s\\w+\\s\\d{5}"\))\,1
\s.indexOf("\m"\)+1;\,1
mod.initialize();,1
(end),1
prep.execute();,1
validateAddress(),1
true),1
yyyy-mm-dd/yyyy-mm-dd,1
Room>),1
selection,1
amountOfReservations,1
contactInfoView;,1
parameter,1
*Don't,1
((id.isEmpty(),1
Rooms,1
test,1
hold*/,1
*All,1
GuestViewController,1
EmployeeLoginViewController,1
guestAddress1;,1
sortedData.comparatorProperty().bind(roomTable.comparatorProperty());,1
creating,1
identifier,1
ManagerViewPriceController,1
reservationButton),1
address);,1
*use,1
ManagerView,1
table,1
cross,1
\(?,?,?,?,?,?,?,?,?)"\);\,1
errors,1
newPriceofRoom));,1
availability,1
Integer.parseInt(str);,1
\rs.getInt("\guestId"\));\,1
-,1
seems,1
separated,1
Ids,1
\email,\,1
reservation*/,1
guestID),1
(editGuestInfo(new,1
guestPhoneNumber.getText();,1
\days"\));\,1
java.time.LocalDate;,1
Action,1
address2,1
AmenityView,1
\deleted."\);\,1
pushed,1
ConfirmationViewController,1
amenityViewController,1
c.createStatement();,1
***Whenever,1
ManagerViewEmployeeController,1
assigning,1
verified,1
\ChronoUnit.DAYS.between(startDate.getValue(),\,1
\rs.getString("\lastName"\),\,1
WHERE,1
*Do,1
process,1
Math.abs(date1-date2);,1
*if,1
(start),1
primaryPerson;,1
chosenRooms.get(i);,1
dayCellFactory,1
i++){,1
Removes,1
Checkin,1
function,1
Locale.setDefault(Locale.US);,1
(!address2.isEmpty())),1
!newEmployeePassword.isEmpty()),1
ManagerViewController,1
javax.sql.DataSource;,1
validatePhoneNumber(),1
guestCCNumber;,1
class),1
\prep.setString(6,\,1
SortedList<>(filteredData);,1
remove,1
period,1
run,1
stored,1
loads,1
isnt,1
startDate.getValue().toEpochDay();,1
hrms.Model.Application;,1
instance,1
add(or,1
payment,1
uploaded,1
hrms.Model.ModelControl;,1
anyways,1
dont,1
surface,1
System(HRMS).An,1
guestID,1
app.setEndDate(endDate.getValue().toString());,1
startDate.setDayCellFactory(dayCellFactory);,1
roomButton),1
Here,1
s.substring(ind);,1
push,1
guestLastName.getText().isEmpty(),1
dayView;,1
\Number"\,\,1
List<Room>,1
setEmployee(String,1
guestPhoneNumber;,1
exist),1
(validateFields(),1
ds=cpds;,1
once,1
<,1
Where,1
cause,1
String[],1
Clears,1
successfully,1
newEmployeePassword);,1
guestAddress2.getText().isEmpty(),1
\number"\,\,1
>=2,1
\prep.setString(3,\,1
/*The,1
\FXMLLoader.load(HRMS.class.getResource("\View/GuestView.fxml"\));\,1
goes,1
them,1
EmployeeMC.deleteEmployee(selectedID);,1
str),1
\(!creditCard.matches("\^\\d{8,19}"\))\,1
follow,1
An,1
id.isEmpty(),1
having,1
construct,1
amountOfDays,1
phoneNumber);,1
ConfirmationError(),1
*2,1
HomeViewController,1
ManagerAmenityView,1
paticular,1
prep,1
ManagerViewPrice,1
\room,\,1
In,1
checkInButton.getScene().getWindow();,1
reservationButton;,1
don't,1
\s.substring(ind,\,1
guestPhoneNumber.getText().isEmpty(),1
INTO,1
Adds,1
\(!lastName.matches("\[a-zA-Z]+"\))\,1
\endDate.valueProperty().addListener((ov,\,1
\prep.setInt(9,\,1
java.util.Locale;,1
guestFirstName.getText();,1
\(!emailAddress.contains("\@"\))\,1
employeeView;,1
(isNumeric(id),1
item);,1
\deleted.."\);\,1
\definite,\,1
arguments,1
\added."\);\,1
models,1
\updates,\,1
DataSource,1
d,1
\"\Incorrect\,1
r:,1
i=0;,1
age),1
decrease,1
oh,1
unavailable,1
right,1
*Here,1
Amenities,1
creditcard,1
\System.out.println("\Updated\,1
\later,\,1
choices,1
ResultSet,1
home,1
mod.getReservation(app.getReservationNumber());,1
clearRoom,1
parameters,1
app.setDayCount(days);,1
guestLastName;,1
Sets,1
*automatically,1
\app.getEndDate().substring(0,\,1
FROM,1
Cancels,1
idea,1
//??,1
secondaryPeople;,1
